@startuml
'https://plantuml.com/class-diagram

VariantType <--o ComponentFieldDefinition
ComponentType <--* ComponentInfo
ComponentInfo <--* World
ComponentValue <--* ComponentData
ComponentData <--* World
EntityId <--o ComponentData
EntityId <--o World
ComponentFieldDefinition <--o ComponentDefinition

enum VariantType

interface ComponentFieldDefinition {
    get_type(&self) -> VariantType
    get_name(&self) -> String
}

interface ComponentDefinition {
    FieldDefinition: ComponentFieldDefinition
    get_fields(&self) -> Vec<Self::FieldDefinition>
    add_field(&mut self, field_definition: Self::FieldDefinition)
}

interface ComponentInfo {
    get_hash(&self) -> u64
    create(hash: u64) -> Self
}

interface ComponentData {
    EntityIdType: EntityId
    ComponentValueType: ComponentValue

    new(entity: Self::EntityIdType) -> Self
    get_entity(&self) -> Self::EntityIdType
    get_field(&self, field: String) -> &Self::ComponentValueType
    set_field(&mut self, field: String, value: &Self::ComponentValueType)
}

interface ComponentValue {
    get_type(&self) -> VariantType
    set_nil(&mut self)
    get_nil(&self) -> ()
    set_int(&mut self, value: i64)
    get_int(&self) -> i64
    set_string(&mut self, value: String)
    get_string(&self) -> String
    set_bool(&mut self, value: bool)
    get_bool(&self) -> bool
    set_real(&mut self, value: f64)
    get_real(&self) -> f64
}

class EntityId {
    0: Uuid

    create() -> EntityId
}

enum RegisterEntityError {
    AlreadyRegistered
}

enum SetComponentDataError {
    EntityNotFound
    ComponentNotFound
    DataInUse
}

enum GetComponentOfEntityError {
    EntityNotFound,
    ComponentNotFound,
    ComponentNotInEntity,
}

enum GetComponentDataError {
    ComponentNotFound
}

class World<TComponentDefinition, TComponentData, TComponentInfo> {
    component_definitions: HashMap<TComponentInfo, TComponentDefinition>
    component_names: HashMap<String, TComponentInfo>
    entities: Vec<TComponentData::EntityIdType>
    components: HashMap<String, Vec<Rc<RefCell<TComponentData>>>>
    components_of_entity: HashMap<TComponentData::EntityIdType, HashMap<String, Rc<RefCell<TComponentData>>>>

    register_component(&mut self, name: String, component_definition: TComponentDefinition) -> Result<TComponentInfo, String>
    get_component_data(&self, name: String) -> Result<Vec<TComponentData>, GetComponentDataError>
    has_component(&self, name: String) -> bool
    create_entity(&mut self) -> Box<TComponentData::EntityIdType> -> Box<TComponentData::EntityIdType>
    register_entity(&mut self, id: &TComponentData::EntityIdType) -> Result<(), RegisterEntityError>
    add_component_to_entity(&mut self, entity_id: &TComponentData::EntityIdType, component: String) -> Result<(), String>
    set_component_data(&mut self, entity_id: &TComponentData::EntityIdType, component: String, data: &TComponentData) -> Result<(), SetComponentDataError>
    is_component_added_to_entity(&self, entity_id: &TComponentData::EntityIdType, component: String) -> bool
    get_components_of_entity(&self, entity_id: &TComponentData::EntityIdType) -> Result<Vec<String>, GetComponentOfEntityError>
    get_component_of_entity(&self, entity_id: &TComponentData::EntityIdType, component: String) -> Result<TComponentData, GetComponentOfEntityError>
}

@enduml