@startuml
'https://plantuml.com/class-diagram

VariantType <--o ComponentFieldDefinition
ComponentFieldDefinition <--* Component
ComponentType <--* ComponentInfo
ComponentInfo <--* World
ComponentValue <--* ComponentData
ComponentData <--* World
EntityId <--o ComponentData
EntityId <--o World

enum VariantType

class ComponentFieldDefinition {
    String name
    VariantType type
}

class ComponentInfo {
    hash: u64
}

class ComponentData {
    entity: EntityId
    fields: HashMap<String, ComponentValue>

    new() -> ComponentData
    get_entity(&self) -> EntityId

    get_field(&self, field: String) -> &ComponentValue
    set_field(&mut self, field: String, value; &ComponentValue)
}

enum ComponentValue {
    Nil
    Int: i64
    String: String
    Bool: bool
    Real: f64

    default() -> ComponentValue
}

class EntityId {
    0: Uuid

    create() -> EntityId
}

enum RegisterEntityError {
    AlreadyRegistered
}

enum SetComponentDataError {
    EntityNotFound
    ComponentNotFound
    DataInUse
}

class World {
    component_definitions: HashMap<ComponentInfo, Vec<ComponentFieldDefinition>>
    component_names: HashMap<String, ComponentInfo>
    entities: Vec<EntityId>
    components: HashMap<String, Vec<Rc<RefCell<ComponentData>>>>
    components_of_entity: HashMap<EntityId, HashMap<String, Rc<RefCell<ComponentData>>>>

    register_component(&mut self, name: String, fields: Vec<ComponentFieldDefinition>) -> Result<ComponentInfo, String>
    create_entity(&mut self) -> EntityId
    register_entity(&mut self, id: &EntityId) -> Result<(), RegisterEntityError>
    add_component_to_entity(&mut self, entity_id: &EntityId, component: String) -> Result<(), String>
    set_component_data(&mut self, entity_id: &EntityId, component: String, data: &ComponentData) -> Result<(), SetComponentDataError>
    is_component_added_to_entity(&self, entity_id: &EntityId, component: String) -> bool;
}

@enduml