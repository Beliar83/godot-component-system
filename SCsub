import time

Import('env')
import os
import subprocess

command = 'cargo build --manifest-path=./Cargo.toml'

libpath = './target'

if env['platform'] == 'javascript':
    libpath += '/wasm32-unknown-emscripten'
    command += ' --target=wasm32-unknown-emscripten'

if env['target'].startswith('release'):
    command = command + ' --release'
    target = 'release'
    libpath += '/release'
else:
    libpath += '/debug'
    target = 'debug'

rust_env = {
    **os.environ,
    'GODOT_PLATFORM': env['platform'],
    'GODOT_PATH': Dir('#').abspath,
    'EMCC_CFLAGS': str.join(' ', env['CXXFLAGS']),
}

print('godot-component-system: Compiling rust library')
process = subprocess.run(command + " -p gcs-cxx", shell=True, env=rust_env)
process.check_returncode()
process = subprocess.run(command, shell=True, env=rust_env)
process.check_returncode()

src_list = ['register_types.cpp',
            'src/component.cpp',
            'src/component_definition.cpp',
            'src/component_field_definition.cpp',
            'src/component_info.cpp',
            'src/ecs_world_2d.cpp',
            'src/ecs_world_base.cpp',
            'src/entity.cpp',
            ]

env_godot_component_system = env.Clone()
libsuffix = env['LIBSUFFIX']

env_godot_component_system.add_source_files(env.modules_sources, src_list)
env_godot_component_system.Append(CPPPATH=['include'])
env_godot_component_system.Append(CPPPATH=['target/cxxbridge'])
env_godot_component_system.Append(CPPPATH=['.'])


if env.msvc:
    env.Append(LIBS=[File(libpath + '/gcs_cxx.lib')])
    env.Append(LIBS=[File(libpath + '/godot_component_system.lib')])
    env.Append(LINKFLAGS=['userenv.lib'])
else:
    env.Append(LIBPATH=[os.path.abspath(libpath)])
    env.Append(LIBS=['gcs_cxx'])
    env.Append(LIBS=['godot_component_system'])
    if env['platform'] == 'windows':
        env.Append(LIBS=['userenv'])
